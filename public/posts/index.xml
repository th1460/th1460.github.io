<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on th1460</title>
        <link>/posts/</link>
        <description>Recent content in Posts on th1460</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 11 May 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>IBM Cloud Functions with R - a simple example</title>
            <link>/posts/2021/05/ibm-cloud-functions-with-r-a-simple-example/</link>
            <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/05/ibm-cloud-functions-with-r-a-simple-example/</guid>
            <description>IBM Cloud™ Functions service is an event-driven compute platform, also referred to as Serverless computing, or as Function as a Service (FaaS), that runs code in response to events or direct invocations.
 Configuration In order to run a function with another language, that is not supported by IBM Cloud Functions, you need indicate a exec file with an initial configuration. In the Cloud, the function will run on Docker container whose image is the openwhisk/dockerskeleton.</description>
            <content type="html"><![CDATA[<blockquote>
<p><a href="https://cloud.ibm.com/functions/">IBM Cloud™ Functions</a> service is an event-driven compute platform, also referred to as Serverless computing, or as Function as a Service (FaaS), that runs code in response to events or direct invocations.</p>
</blockquote>
<h2 id="configuration">Configuration</h2>
<p>In order to run a function with another language, that is not supported by IBM Cloud Functions, you need indicate a <code>exec</code> file with an initial configuration. In the Cloud, the function will run on Docker container whose image is the <code>openwhisk/dockerskeleton</code>. The <code>apk</code> is an Alpine Linux package management, because of the linux distribution used in the docker image.</p>
<pre><code>#!/bin/bash

# install R
apk update &amp;&amp; apk add R R-dev R-doc build-base jq

# install package
R -e &quot;install.packages('jsonlite', repos = 'http://cran.rstudio.com/')&quot;

# run R script
chmod +x script.R # turn executable
echo &quot;$@&quot; &gt; input.json # set input
./script.R # run script
</code></pre><p>The <code>script.R</code> is set as:</p>
<pre><code>#!/usr/bin/env Rscript

# get input
input &lt;- jsonlite::fromJSON(&quot;input.json&quot;, flatten = FALSE)
input &lt;- as.numeric(input)

# function
A &lt;- function(x) x^2

# output (it is important set the output as JSON)
jsonlite::toJSON(list(side = input, area = A(input)), auto_unbox = TRUE)
</code></pre><h2 id="deploy">Deploy</h2>
<pre><code>zip -r raction.zip exec script.R
ibmcloud fn action create raction raction.zip --native
</code></pre><h3 id="test">Test</h3>
<pre><code>ibmcloud fn action invoke raction --result --param s 8
</code></pre><h2 id="web-actions">Web Actions</h2>
<pre><code>ibmcloud fn action update raction raction.zip --native --web true
</code></pre><h3 id="request">Request</h3>
<pre><code>curl -H &quot;Content-type: application/json&quot; -d '{&quot;s&quot;:10}' \
https://${APIHOST}/api/v1/web/${NAMESPACE}/default/raction.json
</code></pre><p>The <code>${APIHOST}</code> and <code>${NAMESPACE}</code> can be get with:</p>
<pre><code>ibmcloud fn action get raction --url
</code></pre><h2 id="docker">Docker</h2>
<p>It is possible to use docker to deploy your function.</p>
<p>You need a Dockerfile, build and push (Docker Hub only)</p>
<pre><code># dockerfile
FROM openwhisk/dockerskeleton
RUN apk update &amp;&amp; apk add R R-dev R-doc build-base
RUN R -e &quot;install.packages('jsonlite', repos = 'http://cran.rstudio.com/')&quot;

# build
docker -t th1460/raction .

# push
docker push th1460/raction
</code></pre><p>The <code>exec</code> is modified because the step to install R, linux dependencies and R libraries can be changed to execute in the Docker build.</p>
<pre><code>#!/bin/bash

# run R script
chmod +x script.R # turn executable
echo &quot;$@&quot; &gt; input.json # set input
./script.R # run script
</code></pre><p>To deploy the functions you need to indicate the repository that is in Docker Hub <code>--docker th1460/raction</code></p>
<pre><code>ibmcloud fn action create raction raction.zip --docker th1460/raction
</code></pre><p>This approach could be interesting to reduce the time to build in the request of the function. In comparing the speed, this approach was faster than the first one.</p>
<h2 id="references">References</h2>
<ul>
<li>Preparing apps in Docker images: <a href="https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-prep#prep_docker">https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-prep#prep_docker</a></li>
<li>Creating web actions: <a href="https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-actions_web">https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-actions_web</a></li>
<li>Serverless Functions in your favorite language with Openwhisk: <a href="https://medium.com/openwhisk/serverless-functions-in-your-favorite-language-with-openwhisk-f7c447558f42">https://medium.com/openwhisk/serverless-functions-in-your-favorite-language-with-openwhisk-f7c447558f42</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
