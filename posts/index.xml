<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on th1460</title>
        <link>/posts/</link>
        <description>Recent content in Posts on th1460</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 07 Aug 2022 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Mapa 3D com Rayshader</title>
            <link>/posts/2022/08/mapa-3d-com-rayshader/</link>
            <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
            
            <guid>/posts/2022/08/mapa-3d-com-rayshader/</guid>
            <description>Aqui um exemplo de como construir um mapa 3D de uma parte do município do Rio de Janeiro com a linguagem R e a biblioteca rayshader.
Dados de elevação Primeiro é necessário obter as imagens de elevação. Nesta página opentopography.org é possível conseguir estes dados. Selecione uma área e escolha uma base com as imagens disponíveis aqui no portal.opentopography.org/datasets e salve em um formato .tif.
Salve os valores utilizados de latitude e longitude na seleção dos limites da região do mapa na variável bbox.</description>
            <content type="html"><![CDATA[<p>Aqui um exemplo de como construir um mapa 3D de uma parte do município do Rio de Janeiro com a linguagem R e a biblioteca <a href="https://www.rayshader.com/"><code>rayshader</code></a>.</p>
<h2 id="dados-de-elevação">Dados de elevação</h2>
<p>Primeiro é necessário obter as imagens de elevação. Nesta página <a href="https://opentopography.org">opentopography.org</a> é possível conseguir estes dados. Selecione uma área e escolha uma base com as imagens disponíveis aqui no <a href="https://portal.opentopography.org/datasets">portal.opentopography.org/datasets</a> e salve em um formato <code>.tif</code>.</p>
<p>Salve os valores utilizados de latitude e longitude na seleção dos limites da região do mapa na variável <code>bbox</code>.</p>
<pre><code>bbox &lt;- list(
    p2 = list(long = -43.2328217452992, lat = -22.99560928307949),
    p1 = list(long = -43.133008448808454, lat = -22.930329210944166)
)
</code></pre><p>Carregue a imagem com as informações de elevação em <code>.tif</code> utilizando a função
<code>raster::raster</code>.</p>
<pre><code># Carregar o arquivo tif
elev_file &lt;- &quot;data/rj.tif&quot;
elev_img &lt;- raster::raster(elev_file)
elev_matrix &lt;- 
    matrix(raster::extract(elev_img, 
                           raster::extent(elev_img), 
                           buffer = 1000), 
           nrow = ncol(elev_img), 
           ncol = nrow(elev_img)
    )
    
    
# Detectar camanda de água
watermap &lt;- rayshader::detect_water(elev_matrix)
</code></pre><h2 id="adicionando-a-textura">Adicionando a textura</h2>
<p>A textura do mapa foi obtida através desta rotina. As funções <code>define_image_size</code> e <code>get_arcgis_map_image</code> são deste <a href="https://github.com/wcmbishop/rayshader-demo/tree/master/R">repositório</a>.</p>
<pre><code>source(&quot;src/define_image_size.R&quot;)
source(&quot;src/get_arcgis_map_image.R&quot;)

image_size &lt;- define_image_size(bbox, major_dim = 600)

overlay_file &lt;- &quot;../data/rj_overlay.png&quot;

get_arcgis_map_image(bbox, map_type = &quot;World_Imagery&quot;, file = overlay_file,
                     width = image_size$width, height = image_size$height, 
                     sr_bbox = 4326)

overlay_img &lt;- png::readPNG(overlay_file)
</code></pre><h2 id="renderizando-o-mapa-em-3d">Renderizando o mapa em 3D</h2>
<p>A última etapa é a renderização do mapa</p>
<pre><code># Renderizando
zscale &lt;- 30
rgl::clear3d()
elev_matrix |&gt; 
    rayshader::sphere_shade(texture = &quot;imhof4&quot;) |&gt; 
    rayshader::add_water(watermap, color = &quot;imhof4&quot;) |&gt; 
    rayshader::add_overlay(overlay_img, alphalayer = .8) |&gt; 
    plot_3d(elev_matrix, zscale = zscale, windowsize = c(1500, 1200),
            water = TRUE, soliddepth = -max(elev_matrix)/zscale, wateralpha = 1,
            theta = 25, phi = 30, zoom = 0.65, fov = 60)

# Salvando o resultado final
rayshader::render_snapshot(&quot;data/rj-3d.png&quot;)
</code></pre><p>Após a renderização foram adicionados os rótulos no <a href="https://www.gimp.org">GIMP</a>.</p>
<p><img src="https://raw.githubusercontent.com/th1460/linguagem-r/main/data/rj-3d-editado.png" alt=""></p>
<h2 id="referências">Referências</h2>
<ul>
<li>A Rayshader base tutorial + Bonus : Hawaii <a href="https://www.davidsolito.com/post/a-rayshader-base-tutortial-bonus-hawaii/">https://www.davidsolito.com/post/a-rayshader-base-tutortial-bonus-hawaii/</a></li>
<li>I can rayshade, and so can you <a href="https://wcmbishop.github.io/rayshader-demo/">https://wcmbishop.github.io/rayshader-demo/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>IBM Cloud Functions with R - a simple example</title>
            <link>/posts/2021/05/ibm-cloud-functions-with-r-a-simple-example/</link>
            <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/05/ibm-cloud-functions-with-r-a-simple-example/</guid>
            <description>IBM Cloud™ Functions service is an event-driven compute platform, also referred to as Serverless computing, or as Function as a Service (FaaS), that runs code in response to events or direct invocations.
 Configuration In order to run a function with another language, that is not supported by IBM Cloud Functions, you need indicate a exec file with an initial configuration. In the Cloud, the function will run on Docker container whose image is the openwhisk/dockerskeleton.</description>
            <content type="html"><![CDATA[<blockquote>
<p><a href="https://cloud.ibm.com/functions">IBM Cloud™ Functions</a> service is an event-driven compute platform, also referred to as Serverless computing, or as Function as a Service (FaaS), that runs code in response to events or direct invocations.</p>
</blockquote>
<h2 id="configuration">Configuration</h2>
<p>In order to run a function with another language, that is not supported by IBM Cloud Functions, you need indicate a <code>exec</code> file with an initial configuration. In the Cloud, the function will run on Docker container whose image is the <code>openwhisk/dockerskeleton</code>. The <code>apk</code> is an Alpine Linux package management, because of the linux distribution used in the docker image.</p>
<pre><code>#!/bin/bash

# install R
apk update &amp;&amp; apk add R R-dev R-doc build-base jq

# install package
R -e &quot;install.packages('jsonlite', repos = 'http://cran.rstudio.com/')&quot;

# run R script
chmod +x script.R # turn executable
echo &quot;$@&quot; &gt; input.json # set input
./script.R # run script
</code></pre><p>The <code>script.R</code> is set as:</p>
<pre><code>#!/usr/bin/env Rscript

# get input
input &lt;- jsonlite::fromJSON(&quot;input.json&quot;, flatten = FALSE)
input &lt;- as.numeric(input)

# function
A &lt;- function(x) x^2

# output (it is important set the output as JSON)
jsonlite::toJSON(list(side = input, area = A(input)), auto_unbox = TRUE)
</code></pre><h2 id="deploy">Deploy</h2>
<pre><code>zip -r raction.zip exec script.R
ibmcloud fn action create raction raction.zip --native
</code></pre><h3 id="test">Test</h3>
<pre><code>ibmcloud fn action invoke raction --result --param s 8
</code></pre><h2 id="web-actions">Web Actions</h2>
<pre><code>ibmcloud fn action update raction raction.zip --native --web true
</code></pre><h3 id="request">Request</h3>
<pre><code>curl -H &quot;Content-type: application/json&quot; -d '{&quot;s&quot;:10}' \
https://${APIHOST}/api/v1/web/${NAMESPACE}/default/raction.json
</code></pre><p>The <code>${APIHOST}</code> and <code>${NAMESPACE}</code> can be get with:</p>
<pre><code>ibmcloud fn action get raction --url
</code></pre><h2 id="docker">Docker</h2>
<p>It is possible to use docker to deploy your function.</p>
<p>You need a Dockerfile, build and push (Docker Hub only)</p>
<pre><code># dockerfile
FROM openwhisk/dockerskeleton
RUN apk update &amp;&amp; apk add R R-dev R-doc build-base
RUN R -e &quot;install.packages('jsonlite', repos = 'http://cran.rstudio.com/')&quot;

# build
docker -t th1460/raction .

# push
docker push th1460/raction
</code></pre><p>The <code>exec</code> is modified because the step to install R, linux dependencies and R libraries can be changed to execute in the Docker build.</p>
<pre><code>#!/bin/bash

# run R script
chmod +x script.R # turn executable
echo &quot;$@&quot; &gt; input.json # set input
./script.R # run script
</code></pre><p>To deploy the functions you need to indicate the repository that is in Docker Hub <code>--docker th1460/raction</code></p>
<pre><code>ibmcloud fn action create raction raction.zip --docker th1460/raction
</code></pre><p>This approach could be interesting to reduce the time to build in the request of the function. In comparing the speed, this approach was faster than the first one.</p>
<p>The scripts this post is found in <a href="https://github.com/th1460/r-actions-example">github.com/th1460/r-actions-example</a>.</p>
<h2 id="references">References</h2>
<ul>
<li>Preparing apps in Docker images: <a href="https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-prep#prep_docker">https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-prep#prep_docker</a></li>
<li>Creating web actions: <a href="https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-actions_web">https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-actions_web</a></li>
<li>Serverless Functions in your favorite language with Openwhisk: <a href="https://medium.com/openwhisk/serverless-functions-in-your-favorite-language-with-openwhisk-f7c447558f42">https://medium.com/openwhisk/serverless-functions-in-your-favorite-language-with-openwhisk-f7c447558f42</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
